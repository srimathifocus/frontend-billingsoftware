import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-toastify";
import {
  FileText,
  Calendar,
  TrendingUp,
  DollarSign,
  Download,
  Filter,
  ArrowLeft,
  ChevronDown,
  ChevronUp,
} from "lucide-react";
import { useNavigate } from "react-router-dom";
import api from "../utils/api";
import { colors } from "../theme/colors";

interface Loan {
  _id: string;
  loanId: string;
  amount: number;
  interestPercent: number;
  status: string;
  createdAt: string;
  customerId: {
    name: string;
    phone: string;
  };
}

interface RepaymentTransaction {
  _id: string;
  principalAmount: number;
  interestAmount: number;
  totalAmount: number;
  repaymentDate: string;
  loanId: {
    loanId: string;
    customerId: {
      name: string;
      phone: string;
    };
  };
}

interface TransactionReportData {
  title: string;
  generatedOn: string;
  generatedBy: string;
  period: {
    startDate: string;
    endDate: string;
  };
  summary: {
    totalLoansIssued: number;
    totalLoanAmount: number;
    totalRepayments: number;
    totalRepaymentAmount: number;
    totalInterestEarned: number;
    netRevenue: number;
  };
  loans: Loan[];
  repaymentTransactions: RepaymentTransaction[];
}

export const TransactionReportPage = () => {
  const navigate = useNavigate();
  const [reportType, setReportType] = useState("monthly");
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [showLoanDetails, setShowLoanDetails] = useState(false);
  const [showRepaymentDetails, setShowRepaymentDetails] = useState(false);

  // Set default dates when switching to custom
  const handleReportTypeChange = (newType: string) => {
    setReportType(newType);
    if (newType === "custom" && !startDate && !endDate) {
      const today = new Date();
      const firstDayOfMonth = new Date(
        today.getFullYear(),
        today.getMonth(),
        1
      );
      setStartDate(firstDayOfMonth.toISOString().split("T")[0]);
      setEndDate(today.toISOString().split("T")[0]);
    }
  };

  const {
    data: reportData,
    isLoading,
    error,
    refetch,
  } = useQuery<TransactionReportData>({
    queryKey: ["transactionReport", reportType, startDate, endDate],
    queryFn: async () => {
      const params = new URLSearchParams({ reportType });
      if (reportType === "custom") {
        params.append("startDate", startDate);
        params.append("endDate", endDate);
      }

      const response = await api.get(`/reports/transactions?${params}`);
      return response.data;
    },
    enabled: reportType !== "custom" || (startDate && endDate),
  });

  const handleGenerateReport = () => {
    if (reportType === "custom") {
      if (!startDate || !endDate) {
        toast.error("Please select both start and end dates for custom range");
        return;
      }
      if (new Date(startDate) > new Date(endDate)) {
        toast.error("Start date cannot be later than end date");
        return;
      }
    }
    refetch();
  };

  const handleDownloadReport = () => {
    if (!reportData) return;

    // Generate CSV data
    const csvData = [
      ["Focus Pawn Shop - Transaction Report"],
      [
        "Report Period:",
        reportData.period.startDate + " to " + reportData.period.endDate,
      ],
      ["Generated By:", reportData.generatedBy],
      ["Generated On:", new Date(reportData.generatedOn).toLocaleDateString()],
      [""],
      ["SUMMARY"],
      ["Total Loans Issued:", reportData.summary.totalLoansIssued],
      [
        "Total Loan Amount:",
        `Rs. ${reportData.summary.totalLoanAmount.toLocaleString()}`,
      ],
      ["Total Repayments:", reportData.summary.totalRepayments],
      [
        "Total Repayment Amount:",
        `Rs. ${reportData.summary.totalRepaymentAmount.toLocaleString()}`,
      ],
      [
        "Interest Earned:",
        `Rs. ${reportData.summary.totalInterestEarned.toLocaleString()}`,
      ],
      [""],
      ["LOAN DETAILS"],
      [
        "Loan ID",
        "Customer Name",
        "Phone",
        "Amount",
        "Interest Rate",
        "Status",
        "Date",
      ],
      ...reportData.loans.map((loan) => [
        loan.loanId,
        loan.customerId?.name || "",
        loan.customerId?.phone || "",
        `Rs. ${loan.amount.toLocaleString()}`,
        `${loan.interestPercent}%`,
        loan.status,
        new Date(loan.createdAt).toLocaleDateString(),
      ]),
      [""],
      ["REPAYMENT TRANSACTIONS"],
      [
        "Loan ID",
        "Customer Name",
        "Phone",
        "Principal Amount",
        "Interest Amount",
        "Total Amount",
        "Repayment Date",
      ],
      ...reportData.repaymentTransactions.map((repayment) => [
        repayment.loanId?.loanId || "",
        repayment.loanId?.customerId?.name || "",
        repayment.loanId?.customerId?.phone || "",
        `Rs. ${repayment.principalAmount.toLocaleString()}`,
        `Rs. ${repayment.interestAmount.toLocaleString()}`,
        `Rs. ${repayment.totalAmount.toLocaleString()}`,
        new Date(repayment.repaymentDate).toLocaleDateString(),
      ]),
    ];

    const csvContent = csvData.map((row) => row.join(",")).join("\n");
    const blob = new Blob([csvContent], { type: "text/csv" });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `transaction-report-${
      new Date().toISOString().split("T")[0]
    }.csv`;
    a.click();
    window.URL.revokeObjectURL(url);
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat("en-IN", {
      style: "currency",
      currency: "INR",
      minimumFractionDigits: 0,
    }).format(amount);
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto p-4">
      {/* Header */}
      <div className="flex items-center gap-4 mb-4">
        <button
          onClick={() => navigate("/dashboard")}
          className="p-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200"
        >
          <ArrowLeft className="h-5 w-5" />
        </button>
        <div className="flex-1">
          <h1 className="text-xl sm:text-2xl font-bold text-gray-900 dark:text-white">
            Transaction Reports
          </h1>
          <p className="text-sm text-gray-600 dark:text-gray-400">
            Generate transaction reports for your pawn shop
          </p>
        </div>
      </div>

      {/* Compact Report Generation Form */}
      <div className="bg-white dark:bg-gray-800 rounded-lg p-4 shadow-sm border border-gray-200 dark:border-gray-700 mb-4">
        <div className="flex flex-col sm:flex-row sm:items-end gap-4">
          <div className="flex-1">
            <label className="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">
              Report Type
            </label>
            <select
              value={reportType}
              onChange={(e) => handleReportTypeChange(e.target.value)}
              className="w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white"
            >
              <option value="daily">Daily</option>
              <option value="monthly">Monthly</option>
              <option value="yearly">Yearly</option>
              <option value="custom">Custom Range</option>
            </select>
          </div>

          {reportType === "custom" && (
            <>
              <div>
                <label className="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Start Date
                </label>
                <input
                  type="date"
                  value={startDate}
                  max={new Date().toISOString().split("T")[0]}
                  onChange={(e) => setStartDate(e.target.value)}
                  className="w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white"
                />
              </div>

              <div>
                <label className="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">
                  End Date
                </label>
                <input
                  type="date"
                  value={endDate}
                  min={startDate}
                  max={new Date().toISOString().split("T")[0]}
                  onChange={(e) => setEndDate(e.target.value)}
                  className="w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white"
                />
              </div>
            </>
          )}

          <button
            onClick={handleGenerateReport}
            className="flex items-center gap-2 px-4 py-2 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors whitespace-nowrap"
          >
            <FileText className="h-4 w-4" />
            Generate
          </button>
        </div>
      </div>

      {/* Compact Report Results */}
      {reportData && (
        <div className="space-y-4">
          {/* Compact Report Header with Summary */}
          <div className="bg-white dark:bg-gray-800 rounded-lg p-4 shadow-sm border border-gray-200 dark:border-gray-700">
            <div className="flex justify-between items-start mb-4">
              <div>
                <h2 className="text-lg font-bold text-gray-900 dark:text-white">
                  {reportData.title}
                </h2>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  {new Date(reportData.period.startDate).toLocaleDateString()} -{" "}
                  {new Date(reportData.period.endDate).toLocaleDateString()}
                </p>
              </div>
              <button
                onClick={handleDownloadReport}
                className="flex items-center gap-2 px-3 py-2 text-sm bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
              >
                <Download className="h-4 w-4" />
                CSV
              </button>
            </div>

            {/* Compact Summary Grid */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                <div className="flex items-center justify-center mb-1">
                  <TrendingUp className="h-4 w-4 text-blue-600 dark:text-blue-400 mr-1" />
                  <span className="text-xs text-gray-600 dark:text-gray-400">
                    Loans
                  </span>
                </div>
                <p className="text-lg font-bold text-blue-600">
                  {reportData.summary.totalLoansIssued}
                </p>
                <p className="text-xs text-gray-600 dark:text-gray-400">
                  {formatCurrency(reportData.summary.totalLoanAmount)}
                </p>
              </div>

              <div className="text-center p-3 bg-green-50 dark:bg-green-900/20 rounded-lg">
                <div className="flex items-center justify-center mb-1">
                  <DollarSign className="h-4 w-4 text-green-600 dark:text-green-400 mr-1" />
                  <span className="text-xs text-gray-600 dark:text-gray-400">
                    Repayments
                  </span>
                </div>
                <p className="text-lg font-bold text-green-600">
                  {reportData.summary.totalRepayments}
                </p>
                <p className="text-xs text-gray-600 dark:text-gray-400">
                  {formatCurrency(reportData.summary.totalRepaymentAmount)}
                </p>
              </div>

              <div className="text-center p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg">
                <div className="flex items-center justify-center mb-1">
                  <TrendingUp className="h-4 w-4 text-purple-600 dark:text-purple-400 mr-1" />
                  <span className="text-xs text-gray-600 dark:text-gray-400">
                    Interest
                  </span>
                </div>
                <p className="text-lg font-bold text-purple-600">
                  {formatCurrency(reportData.summary.totalInterestEarned)}
                </p>
                <p className="text-xs text-gray-600 dark:text-gray-400">
                  Earned
                </p>
              </div>

              <div className="text-center p-3 bg-orange-50 dark:bg-orange-900/20 rounded-lg">
                <div className="flex items-center justify-center mb-1">
                  <Calendar className="h-4 w-4 text-orange-600 dark:text-orange-400 mr-1" />
                  <span className="text-xs text-gray-600 dark:text-gray-400">
                    Revenue
                  </span>
                </div>
                <p className="text-lg font-bold text-orange-600">
                  {formatCurrency(reportData.summary.netRevenue)}
                </p>
                <p className="text-xs text-gray-600 dark:text-gray-400">Net</p>
              </div>
            </div>
          </div>

          {/* Collapsible Loan Details */}
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
            <button
              onClick={() => setShowLoanDetails(!showLoanDetails)}
              className="w-full px-4 py-3 flex items-center justify-between text-left hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
            >
              <h3 className="text-sm font-semibold text-gray-900 dark:text-white">
                Loan Details ({reportData.loans.length})
              </h3>
              {showLoanDetails ? (
                <ChevronUp className="h-4 w-4 text-gray-500" />
              ) : (
                <ChevronDown className="h-4 w-4 text-gray-500" />
              )}
            </button>

            {showLoanDetails && (
              <div className="border-t border-gray-200 dark:border-gray-700">
                {reportData.loans.length > 0 ? (
                  <div className="divide-y divide-gray-200 dark:divide-gray-700">
                    {reportData.loans.map((loan) => (
                      <div
                        key={loan._id}
                        className="p-4 hover:bg-gray-50 dark:hover:bg-gray-700"
                      >
                        <div className="flex justify-between items-start">
                          <div className="flex-1">
                            <div className="flex items-center gap-2">
                              <span className="text-sm font-medium text-gray-900 dark:text-white">
                                {loan.loanId}
                              </span>
                              <span
                                className={`px-2 py-1 text-xs font-medium rounded-full ${
                                  loan.status === "active"
                                    ? "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300"
                                    : loan.status === "repaid"
                                    ? "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300"
                                    : "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300"
                                }`}
                              >
                                {loan.status}
                              </span>
                            </div>
                            <p className="text-sm text-gray-600 dark:text-gray-400">
                              {loan.customerId?.name} • {loan.customerId?.phone}
                            </p>
                            <p className="text-xs text-gray-500 dark:text-gray-400">
                              {new Date(loan.createdAt).toLocaleDateString()}
                            </p>
                          </div>
                          <div className="text-right">
                            <p className="text-sm font-medium text-gray-900 dark:text-white">
                              {formatCurrency(loan.amount)}
                            </p>
                            <p className="text-xs text-gray-500 dark:text-gray-400">
                              {loan.interestPercent}% interest
                            </p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="p-8 text-center text-gray-500 dark:text-gray-400">
                    No loans found for this period
                  </div>
                )}
              </div>
            )}
          </div>

          {/* Collapsible Repayment Transactions */}
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
            <button
              onClick={() => setShowRepaymentDetails(!showRepaymentDetails)}
              className="w-full px-4 py-3 flex items-center justify-between text-left hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
            >
              <h3 className="text-sm font-semibold text-gray-900 dark:text-white">
                Repayment Transactions (
                {reportData.repaymentTransactions.length})
              </h3>
              {showRepaymentDetails ? (
                <ChevronUp className="h-4 w-4 text-gray-500" />
              ) : (
                <ChevronDown className="h-4 w-4 text-gray-500" />
              )}
            </button>

            {showRepaymentDetails && (
              <div className="border-t border-gray-200 dark:border-gray-700">
                {reportData.repaymentTransactions.length > 0 ? (
                  <div className="divide-y divide-gray-200 dark:divide-gray-700">
                    {reportData.repaymentTransactions.map((repayment) => (
                      <div
                        key={repayment._id}
                        className="p-4 hover:bg-gray-50 dark:hover:bg-gray-700"
                      >
                        <div className="flex justify-between items-start">
                          <div className="flex-1">
                            <div className="flex items-center gap-2">
                              <span className="text-sm font-medium text-gray-900 dark:text-white">
                                {repayment.loanId?.loanId || "N/A"}
                              </span>
                            </div>
                            <p className="text-sm text-gray-600 dark:text-gray-400">
                              {repayment.loanId?.customerId?.name || "N/A"} •{" "}
                              {repayment.loanId?.customerId?.phone || "N/A"}
                            </p>
                            <p className="text-xs text-gray-500 dark:text-gray-400">
                              {new Date(
                                repayment.repaymentDate
                              ).toLocaleDateString()}
                            </p>
                          </div>
                          <div className="text-right">
                            <p className="text-sm font-medium text-gray-900 dark:text-white">
                              {formatCurrency(repayment.totalAmount)}
                            </p>
                            <p className="text-xs text-green-600 dark:text-green-400">
                              Interest:{" "}
                              {formatCurrency(repayment.interestAmount)}
                            </p>
                            <p className="text-xs text-gray-500 dark:text-gray-400">
                              Principal:{" "}
                              {formatCurrency(repayment.principalAmount)}
                            </p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="p-8 text-center text-gray-500 dark:text-gray-400">
                    No repayment transactions found for this period
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};
